/*
  Copyright (c), 2023 Indiana University
  All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.

  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

  * Neither the name of the copyright holder nor the names of its
    contributors may be used to endorse or promote products derived from
    this software without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
import * as id from './id'
import { init } from './event'
import { listen } from './message'
import * as rivet from './rivet'

/**
 * Accepts attributes provided by the server at page initialization time, for
 * use with subsequent server interactions.
 */
class Environment {
  #event
  #nodeId
  #url
  #params
  #username
  #accessToken
  #secretAccessKey
  #xsrfToken
  #sessionExpired
  #refreshTimer

  static #append (params, toAppend) {
    if (!toAppend) return

    const setParam = (name, value) => {
      if (typeof value === 'string') {
        params[name] = value
      } else {
        throw new Error('Invalid param value, expected string')
      }
    }

    if (toAppend instanceof URLSearchParams) {
      for (const [name, value] of toAppend) {
        setParam(name, value)
      }
    } else if (toAppend && typeof toAppend === 'object') {
      for (const name in toAppend) {
        setParam(name, toAppend[name])
      }
    } else {
      throw new Error('Invalid search params, expected URLSearchParams or object')
    }
  }

  #destroy () {
    const nodeId = this.#nodeId
    if (this.#event) this.#event.destroy()

    if (this.#refreshTimer) {
      clearTimeout(this.#refreshTimer)
    }

    this.#event = undefined
    this.#nodeId = undefined
    this.#url = undefined
    this.#username = undefined
    this.#accessToken = undefined
    this.#xsrfToken = undefined
    this.#sessionExpired = undefined
    this.#params = undefined

    console.log('IU: destroyed' + (nodeId ? ' ' + nodeId : ''))
  }

  /**
   * Initializes a page-level environment with attributes from the server.
   *
   * This method may only be called once, at page initialization time, typically
   * prior to any application-level initialization scripts.
   *
   * - url: Base URL for pages and related service endpoints.
   *
   * - username: Principal name for the logged-in user.
   *
   * - params: Plain object containing query parameters to append to all URLs.
   *
   * - accessToken: REST API authorization token.
   *
   * - xsrfToken: Token generated by the server. For appending to the query string
   *             on POST, PUT, and PATCH requests to protect against cross-site
   *             request forgery attacks.
   *
   * - expires: Session expiration date/time, should align with the exp claim on
   *            accessToken and/or xsrfToken if JWT is used. Defaults to twelve
   *            hours from page initialization time if not provided. Once the expiration
   *            date has passed, all web sockets will be closed and no new REST
   *            calls may be created. An error will be broadcast with message type
   *            'error' with the reload attribute as either true or expiredUrl, which
   *            typically results in a Rivet-styled error dialog unless rivetErrorDialog
   *            is false.
   *
   * - expiredUrl: URL used as the reload error attribute when opening the session
   *            expired dialog box.
   *
   * - refreshUrl: URL used to renew the server-side session. Default is 'ping'. The
   *            expected response is 204 NO CONTENT, but all 2xx status codes will be
   *            handled silently. If the first call results in a 404 NOT FOUND error,
   *            an error will be logged on the console and no subsequent calls will be
   *            scheduled. Other errors will be broadcast using message type 'error',
   *            which results in a Rivet-styled error dialog unless rivetErrorDialog
   *            is false.
   *
   * - refreshInterval: Number of milliseconds to wait between calls to refreshUrl.
   *            Defaults to 300000 (5 minutes), may be set to 0 for no session
   *            refresh behavior.
   *
   * - rivetErrorDialog: Flag indicating whether or not to enable a Rivet-based
   *             error dialog when error events are observed. No effect if Rivet
   *             is not loaded on the page. Default is true.
   *
   * - rivetLoadingIndicator: Flag indicating whether or not to enable a Rivet-
   *             based loading indicator while REST calls are active. No effect
   *             if Rivet is not loaded on the page. Default is true.
   *
   * @param environment Server attributes
   */
  init (environment) {
    if (this.#nodeId) {
      throw new Error('Already initialized')
    }

    const nodeId = id.generate()
    console.log('IU: initializing ' + nodeId)

    try {
      const {
        url,
        username,
        params,
        accessToken,
        xsrfToken,
        expires,
        expiredUrl,
        refreshUrl,
        refreshInterval
      } = environment

      this.#url = new URL(url)

      if (typeof username !== 'string') {
        throw new Error('Missing or invalid username')
      }
      this.#username = username

      this.#params = {}
      Environment.#append(this.#params, params)

      if (typeof xsrfToken === 'string') {
        this.#xsrfToken = xsrfToken
      } else if (xsrfToken) {
        throw new Error('Invalid xsrfToken')
      }

      if (typeof accessToken !== 'string') {
        throw new Error('Missing or invalid accessToken')
      }
      this.#accessToken = accessToken

      if (window.Rivet) {
        const { rivetErrorDialog, rivetLoadingIndicator } = environment

        if (rivetErrorDialog !== false) {
          listen('error', e => rivet.openErrorDialog(e))
        }

        if (rivetLoadingIndicator !== false) {
          listen('loading', a => {
            if (a) rivet.showLoadingIndicator()
            else rivet.hideLoadingIndicator()
          })
        }
      }

      this.#nodeId = nodeId
      this.#event = init(nodeId)

      // TODO: pass broadcast hook to rest and websocket modules

      this.#event.broadcast('environment', this)

      setTimeout(() => this.#destroy(), expires ? 43200000 : expires - Date.now())

      console.log('IU: initialized ' + this.#nodeId)

      return () => this.#destroy()
    } catch (e) {
      this.#destroy()
      throw e
    }
  }

  /**
   * Page-level unique identifier, used to identify the browser session
   * on the server side.
   *
   * @returns string
   */
  get nodeId () {
    if (!this.#nodeId) throw new Error('Not initialized')
    return this.#nodeId
  }

  /**
   * Base URL for connecting to REST and WebSocket endpoints, and page-
   * level navigation.
   *
   * @returns URL
   */
  get url () {
    if (!this.#nodeId) throw new Error('Not initialized')
    return this.#url
  }

  /**
   * Principal name for the logged-in user.
   *
   * @returns string
   */
  get username () {
    if (!this.#nodeId) throw new Error('Not initialized')
    return this.#username
  }

  /**
   * Access token for authorizing REST calls.
   * @returns string
   */
  get accessToken () {
    if (!this.#nodeId) throw new Error('Not initialized')
    return this.#accessToken
  }

  /**
   * Appends query parameters from the environment to the those provided.
   * Parameters defined in the environment will replace any provided with the
   * same name.
   *
   * @param params Plain object with parameters to append, may be null or
   * undefined to return only values defined by the envieonment.
   *
   * @param includeXsrfToken True to append the 'xsrf_token' token value.
   *
   * @returns Combined query string, null if none are provided or defined by
   * the environment
   */
  createSearchParams (params, includeXsrfToken) {
    if (!this.#nodeId) throw new Error('Not initialized')

    const query = {}
    Environment.#append(query, params)
    Environment.#append(query, this.#params)

    if (includeXsrfToken) {
      if (!this.#xsrfToken) {
        throw new Error('xsrfToken not initialized')
      } else {
        query.xsrf_token = this.#xsrfToken
      }
    }

    if (Object.keys(query).length === 0) {
      return null
    } else {
      return new URLSearchParams(query)
    }
  }

  /**
   * Gets an absolute URL relative to the application base URL defined by
   * the environment.
   *
   * @param url Relative URL
   *
   * @param params Plain object with parameters to append, may be null or
   * undefined to return only values defined by the envieonment.
   *
   * @param includeXsrfToken True to append the 'xsrf_token' token value to
   * the query string.
   *
   * @returns URL
   */
  getUrl (url, params, includeXsrfToken) {
    if (!this.#nodeId) throw new Error('Not initialized')

    const query = {}

    const s = url.toString()
    const q = s.indexOf('?')
    if (q !== -1) {
      Environment.#append(query, new URLSearchParams(s.substring(q + 1)))
      url = s.substring(0, q)
    }

    Environment.#append(query, params)

    const searchParams = this.createSearchParams(params, includeXsrfToken)
    if (searchParams) url += '?' + searchParams

    return new URL(url, this.#url)
  }
}

export default new Environment()
